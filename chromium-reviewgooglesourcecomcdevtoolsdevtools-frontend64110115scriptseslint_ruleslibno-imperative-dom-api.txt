
// Copyright 2025 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
/**
 * @fileoverview Rule to identify and templatize manually constructed DOM.
 *
 * To check types, run
 * $ npx tsc --noEmit --allowJS --checkJS --downlevelIteration scripts/eslint_rules/lib/no-imperative-dom-api.js
 */
'use strict';
const adorner = require('./no-imperative-dom-api/adorner.js');
const {isIdentifier, getEnclosingExpression} = require('./no-imperative-dom-api/ast.js');
const {ClassMember} = require('./no-imperative-dom-api/class-member.js');
const domApiDevtoolsExtensions = require('./no-imperative-dom-api/dom-api-devtools-extensions.js');
const domApi = require('./no-imperative-dom-api/dom-api.js');
const {DomFragment} = require('./no-imperative-dom-api/dom-fragment.js');
const toolbar = require('./no-imperative-dom-api/toolbar.js');
const widget = require('./no-imperative-dom-api/widget.js');
/** @typedef {import('estree').Node} Node */
/** @typedef {import('eslint').Rule.Node} EsLintNode */
/** @typedef {import('eslint').AST.SourceLocation} SourceLocation */
/** @typedef {import('eslint').Scope.Variable} Variable */
/** @typedef {import('eslint').Scope.Reference} Reference*/
/**
 * @type {import('eslint').Rule.RuleModule}
 */
module.exports = {
  meta: {
    type: 'problem',
    docs: {
      description: 'Prefer template literals over imperative DOM API calls',
      category: 'Possible Errors',
    },
    messages: {
      preferTemplateLiterals:
        'Prefer template literals over imperative DOM API calls',
    },
    fixable: 'code',
    schema: [], // no options
  },
  create : function(context) {
    const sourceCode = context.getSourceCode();
    const subrules = [
      adorner.create(context),
      domApi.create(context),
      domApiDevtoolsExtensions.create(context),
      toolbar.create(context),
      widget.create(context),
    ];
    /**
     * @param {Node} event
     * @return {string|null}
     */
    function getEvent(event) {
      for (const rule of subrules) {
        const result = rule.getEvent?.(event);
        if (result) {
          return result;
        }
      }
      if (event.type === 'Literal') {
        return event.value?.toString() ?? null;
      }
      return null;
    }
    /**
     * @param {EsLintNode} reference
     * @param {DomFragment} domFragment
     * @return {boolean}
     */
    function processReference(reference, domFragment) {
      const parent = reference.parent;
      const isAccessed = parent.type === 'MemberExpression' && parent.object === reference;
      const property = isAccessed ? parent.property : null;
      const grandParent = parent.parent;
      const isPropertyAssignment =
          isAccessed && grandParent.type === 'AssignmentExpression' && grandParent.left === parent;
      const propertyValue = isPropertyAssignment ? grandParent.right : null;
      const isMethodCall = isAccessed && grandParent.type === 'CallExpression' && grandParent.callee === parent;
      const firstArg = isMethodCall ? grandParent.arguments[0] : null;
      const secondArg = isMethodCall ? grandParent.arguments[1] : null;
      const grandGrandParent = grandParent.parent;
      const isPropertyMethodCall = isAccessed && grandParent.type === 'MemberExpression' &&
          grandParent.object === parent && grandGrandParent.type === 'CallExpression' &&
          grandGrandParent.callee === grandParent;
      const propertyMethodArgument = isPropertyMethodCall ? grandGrandParent.arguments[0] : null;
      const isSubpropertyAssignment = isAccessed && grandParent.type === 'MemberExpression' &&
          grandParent.object === parent && grandParent.property.type === 'Identifier' &&
          grandGrandParent.type === 'AssignmentExpression' && grandGrandParent.left === grandParent;
      const subproperty =
          isSubpropertyAssignment && grandParent.property.type === 'Identifier' ? grandParent.property : null;
      const subpropertyValue = isSubpropertyAssignment ? grandGrandParent.right : null;
      for (const rule of subrules) {
        if (isPropertyAssignment) {
          if (rule.propertyAssignment?.(property, propertyValue, domFragment)) {
            return true;
          }
        } else if (isMethodCall) {
          if (isIdentifier(property, 'addEventListener')) {
            const event = getEvent(firstArg);
            const value = secondArg;
            if (event && value.type !== 'SpreadElement') {
              domFragment.eventListeners.push({key: event, value});
            }
            return true;
          }
          if (rule.methodCall?.(property, firstArg, secondArg, domFragment, grandParent)) {
            return true;
          }
        } else if (isPropertyMethodCall) {
          if (rule.propertyMethodCall?.(property, grandParent.property, propertyMethodArgument, domFragment)) {
            return true;
          }
        } else if (isSubpropertyAssignment) {
          if (rule.subpropertyAssignment?.(property, subproperty, subpropertyValue, domFragment)) {
            return true;
          }
        }
      }
      return false;
    }
    /**
     * @param {DomFragment} domFragment
     */
    function getRangesToRemove(domFragment) {
      /** @type {[number, number][]} */
      const ranges = [];
      for (const reference of domFragment.references) {
        if (!reference.processed) {
          continue;
        }
        const expression = getEnclosingExpression(reference.node);
        if (!expression) {
          continue;
        }
        const range = expression.range;
        ranges.push(range);
        for (const child of domFragment.children) {
          ranges.push(...getRangesToRemove(child));
        }
      }
      if (domFragment.initializer && domFragment.references.every(r => r.processed)) {
        ranges.push(getEnclosingExpression(domFragment.initializer).range);
      }
      for (const range of ranges) {
        while ([' ', '\n'].includes(sourceCode.text[range[0] - 1])) {
          range[0]--;
        }
      }
      ranges.sort((a, b) => a[0] - b[0]);
      for (let i = 1; i < ranges.length; i++) {
        if (ranges[i][0] < ranges[i - 1][1]) {
          ranges[i] = [ranges[i - 1][1], Math.max(ranges[i][1], ranges[i - 1][1])];
        }
      }
      return ranges.filter(r => r[0] < r[1]);
    }
    /**
     * @param {DomFragment} domFragment
     */
    function maybeReportDomFragment(domFragment) {
      if (!domFragment.replacementLocation || domFragment.parent || !domFragment.tagName ||
          domFragment.references.every(r => !r.processed)) {
        return;
      }
      context.report({
        node: domFragment.replacementLocation,
        messageId: 'preferTemplateLiterals',
        fix(fixer) {
          const template = 'html`' + domFragment.toTemplateLiteral(sourceCode).join('') + '`';
          let replacementLocation = domFragment.replacementLocation;
          if (replacementLocation.type === 'VariableDeclarator') {
            domFragment.initializer = null;
            return [
              fixer.replaceText(replacementLocation.init, template),
              ...getRangesToRemove(domFragment).map(range => fixer.removeRange(range)),
            ];
          }
          if (replacementLocation.parent.type === 'ExportNamedDeclaration') {
            replacementLocation = replacementLocation.parent;
          }
          const text = `
export const DEFAULT_VIEW = (input, _output, target) => {
  render(${template},
    target, {host: input});
};
`;
          return [
            fixer.insertTextBefore(replacementLocation, text),
            ...getRangesToRemove(domFragment).map(range => fixer.removeRange(range)),
          ];
        }
      });
    }
    return {
      MemberExpression(node) {
        if (node.object.type === 'ThisExpression') {
          ClassMember.getOrCreate(node, sourceCode);
        }
        for (const rule of subrules) {
          if ('MemberExpression' in rule) {
            rule.MemberExpression(node);
          }
        }
      },
      NewExpression(node) {
        for (const rule of subrules) {
          if ('NewExpression' in rule) {
            rule.NewExpression(node);
          }
        }
      },
      'Program:exit'() {
        let processedSome = false;
        do {
          processedSome = false;
          for (const domFragment of DomFragment.values()) {
            if (!domFragment.tagName) {
              continue;
            }
            for (const reference of domFragment.references) {
              if (reference.processed) {
                continue;
              }
              if (processReference(reference.node, domFragment)) {
                reference.processed = true;
                processedSome = true;
              }
            }
          }
        } while (processedSome);
        for (const domFragment of DomFragment.values()) {
          maybeReportDomFragment(domFragment);
        }
        DomFragment.clear();
      }
    };
  }
};

// Copyright 2025 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
/**
 * @fileoverview Rule to identify and templatize manually constructed DOM.
 *
 * To check types, run
 * $ npx tsc --noEmit --allowJS --checkJS --downlevelIteration scripts/eslint_rules/lib/no-imperative-dom-api.js
 */
'use strict';
const adorner = require('./no-imperative-dom-api/adorner.js');
const {isIdentifier, getEnclosingExpression} = require('./no-imperative-dom-api/ast.js');
const {ClassMember} = require('./no-imperative-dom-api/class-member.js');
const domApiDevtoolsExtensions = require('./no-imperative-dom-api/dom-api-devtools-extensions.js');
const domApi = require('./no-imperative-dom-api/dom-api.js');
const {DomFragment} = require('./no-imperative-dom-api/dom-fragment.js');
const toolbar = require('./no-imperative-dom-api/toolbar.js');
const widget = require('./no-imperative-dom-api/widget.js');
/** @typedef {import('estree').Node} Node */
/** @typedef {import('eslint').Rule.Node} EsLintNode */
/** @typedef {import('eslint').AST.SourceLocation} SourceLocation */
/** @typedef {import('eslint').Scope.Variable} Variable */
/** @typedef {import('eslint').Scope.Reference} Reference*/
/**
 * @type {import('eslint').Rule.RuleModule}
 */
module.exports = {
  meta: {
    type: 'problem',
    docs: {
      description: 'Prefer template literals over imperative DOM API calls',
      category: 'Possible Errors',
    },
    messages: {
      preferTemplateLiterals:
        'Prefer template literals over imperative DOM API calls',
    },
    fixable: 'code',
    schema: [], // no options
  },
  create : function(context) {
    const sourceCode = context.getSourceCode();
    const subrules = [
      adorner.create(context),
      domApi.create(context),
      domApiDevtoolsExtensions.create(context),
      toolbar.create(context),
      widget.create(context),
    ];
    /**
     * @param {Node} event
     * @return {string|null}
     */
    function getEvent(event) {
      for (const rule of subrules) {
        const result = rule.getEvent?.(event);
        if (result) {
          return result;
        }
      }
      if (event.type === 'Literal') {
        return event.value?.toString() ?? null;
      }
      return null;
    }
    /**
     * @param {EsLintNode} reference
     * @param {DomFragment} domFragment
     * @return {boolean}
     */
    function processReference(reference, domFragment) {
      const parent = reference.parent;
      const isAccessed = parent.type === 'MemberExpression' && parent.object === reference;
      const property = isAccessed ? parent.property : null;
      const grandParent = parent.parent;
      const isPropertyAssignment =
          isAccessed && grandParent.type === 'AssignmentExpression' && grandParent.left === parent;
      const propertyValue = isPropertyAssignment ? grandParent.right : null;
      const isMethodCall = isAccessed && grandParent.type === 'CallExpression' && grandParent.callee === parent;
      const firstArg = isMethodCall ? grandParent.arguments[0] : null;
      const secondArg = isMethodCall ? grandParent.arguments[1] : null;
      const grandGrandParent = grandParent.parent;
      const isPropertyMethodCall = isAccessed && grandParent.type === 'MemberExpression' &&
          grandParent.object === parent && grandGrandParent.type === 'CallExpression' &&
          grandGrandParent.callee === grandParent;
      const propertyMethodArgument = isPropertyMethodCall ? grandGrandParent.arguments[0] : null;
      const isSubpropertyAssignment = isAccessed && grandParent.type === 'MemberExpression' &&
          grandParent.object === parent && grandParent.property.type === 'Identifier' &&
          grandGrandParent.type === 'AssignmentExpression' && grandGrandParent.left === grandParent;
      const subproperty =
          isSubpropertyAssignment && grandParent.property.type === 'Identifier' ? grandParent.property : null;
      const subpropertyValue = isSubpropertyAssignment ? grandGrandParent.right : null;
      for (const rule of subrules) {
        if (isPropertyAssignment) {
          if (rule.propertyAssignment?.(property, propertyValue, domFragment)) {
            return true;
          }
        } else if (isMethodCall) {
          if (isIdentifier(property, 'addEventListener')) {
            const event = getEvent(firstArg);
            const value = secondArg;
            if (event && value.type !== 'SpreadElement') {
              domFragment.eventListeners.push({key: event, value});
            }
            return true;
          }
          if (rule.methodCall?.(property, firstArg, secondArg, domFragment, grandParent)) {
            return true;
          }
        } else if (isPropertyMethodCall) {
          if (rule.propertyMethodCall?.(property, grandParent.property, propertyMethodArgument, domFragment)) {
            return true;
          }
        } else if (isSubpropertyAssignment) {
          if (rule.subpropertyAssignment?.(property, subproperty, subpropertyValue, domFragment)) {
            return true;
          }
        }
      }
      return false;
    }
    /**
     * @param {DomFragment} domFragment
     */
    function getRangesToRemove(domFragment) {
      /** @type {[number, number][]} */
      const ranges = [];
      for (const reference of domFragment.references) {
        if (!reference.processed) {
          continue;
        }
        const expression = getEnclosingExpression(reference.node);
        if (!expression) {
          continue;
        }
        const range = expression.range;
        ranges.push(range);
        for (const child of domFragment.children) {
          ranges.push(...getRangesToRemove(child));
        }
      }
      if (domFragment.initializer && domFragment.references.every(r => r.processed)) {
        ranges.push(getEnclosingExpression(domFragment.initializer).range);
      }
      for (const range of ranges) {
        while ([' ', '\n'].includes(sourceCode.text[range[0] - 1])) {
          range[0]--;
        }
      }
      ranges.sort((a, b) => a[0] - b[0]);
      for (let i = 1; i < ranges.length; i++) {
        if (ranges[i][0] < ranges[i - 1][1]) {
          ranges[i] = [ranges[i - 1][1], Math.max(ranges[i][1], ranges[i - 1][1])];
        }
      }
      return ranges.filter(r => r[0] < r[1]);
    }
    /**
     * @param {DomFragment} domFragment
     */
    function maybeReportDomFragment(domFragment) {
      if (!domFragment.replacementLocation || domFragment.parent || !domFragment.tagName ||
          domFragment.references.every(r => !r.processed)) {
        return;
      }
      context.report({
        node: domFragment.replacementLocation,
        messageId: 'preferTemplateLiterals',
        fix(fixer) {
          const template = 'html`' + domFragment.toTemplateLiteral(sourceCode).join('') + '`';
          let replacementLocation = domFragment.replacementLocation;
          if (replacementLocation.type === 'VariableDeclarator') {
            domFragment.initializer = null;
            return [
              fixer.replaceText(replacementLocation.init, template),
              ...getRangesToRemove(domFragment).map(range => fixer.removeRange(range)),
            ];
          }
          if (replacementLocation.parent.type === 'ExportNamedDeclaration') {
            replacementLocation = replacementLocation.parent;
          }
          const text = `
export const DEFAULT_VIEW = (input, _output, target) => {
  render(${template},
    target, {host: input});
};
`;
          return [
            fixer.insertTextBefore(replacementLocation, text),
            ...getRangesToRemove(domFragment).map(range => fixer.removeRange(range)),
          ];
        }
      });
    }
    return {
      MemberExpression(node) {
        if (node.object.type === 'ThisExpression') {
          ClassMember.getOrCreate(node, sourceCode);
        }
        for (const rule of subrules) {
          if ('MemberExpression' in rule) {
            rule.MemberExpression(node);
          }
        }
      },
      NewExpression(node) {
        for (const rule of subrules) {
          if ('NewExpression' in rule) {
            rule.NewExpression(node);
          }
        }
      },
      'Program:exit'() {
        for (const domFragment of DomFragment.values()) {
          if (!domFragment.tagName) {
            continue;
          }
          for (const reference of domFragment.references) {
            if (processReference(reference.node, domFragment)) {
              reference.processed = true;
            }
          }
        }
        for (const domFragment of DomFragment.values()) {
          maybeReportDomFragment(domFragment);
        }
        DomFragment.clear();
      }
    };
  }
};

<!DOCTYPE html>
<html lang="en">
<meta charset="utf-8">
<meta name="description" content="Gerrit Code Review">
<meta name="referrer" content="never">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0">
<noscript>To use PolyGerrit, please enable JavaScript in your browser settings, and then refresh this page.</noscript><script nonce="5fI8Q1vyigrjqtMwyOzu1A">window.polymerSkipLoadingFontRoboto = true; window.CLOSURE_NO_DEPS = true; window.DEFAULT_DETAIL_HEXES = {changePage: '1996394',}; window.PRELOADED_QUERIES = {};window.VERSION_INFO = '1399.0';window.STATIC_RESOURCE_PATH = 'https:\/\/cdn.googlesource.com\/polygerrit_ui\/1399.0';window.ASSETS_PATH = 'https:\/\/cdn.googlesource.com\/polygerrit_assets\/868.0';window.INITIAL_DATA = JSON.parse('\x7b\x22\/config\/server\/version\x22: \x223.11.1-835-g32ed58dbd7\x22, \x22\/config\/server\/info\x22: \x7b\x22accounts\x22:\x7b\x22visibility\x22:\x22VISIBLE_GROUP\x22,\x22default_display_name\x22:\x22FULL_NAME\x22\x7d,\x22auth\x22:\x7b\x22auth_type\x22:\x22CUSTOM_EXTENSION\x22,\x22use_contributor_agreements\x22:true,\x22contributor_agreements\x22:\x5b\x7b\x22name\x22:\x22Google CLA\x22,\x22description\x22:\x22Google Contributor License Agreement\x22,\x22url\x22:\x22static\/cla.html\x22\x7d\x5d,\x22editable_account_fields\x22:\x5b\x22REGISTER_NEW_EMAIL\x22\x5d,\x22switch_account_url\x22:\x22\/switch-account$\x7bpath\x7d\x22,\x22http_password_url\x22:\x22https:\/\/chromium.googlesource.com\/new-password\x22,\x22git_basic_auth_policy\x22:\x22HTTP\x22\x7d,\x22change\x22:\x7b\x22disable_private_changes\x22:true,\x22update_delay\x22:30,\x22mergeability_computation_behavior\x22:\x22NEVER\x22,\x22enable_robot_comments\x22:true\x7d,\x22download\x22:\x7b\x22schemes\x22:\x7b\x22repo\x22:\x7b\x22url\x22:\x22$\x7bproject\x7d\x22,\x22is_auth_supported\x22:true,\x22commands\x22:\x7b\x7d,\x22clone_commands\x22:\x7b\x22Clone with commit-msg hook\x22:\x22git clone $\x7bproject\x7d \\u0026\\u0026 (cd $\x7bproject-base-name\x7d \\u0026\\u0026 f\\u003d`git rev-parse --git-dir`\/hooks\/commit-msg ; mkdir -p $(dirname $f) ; curl -Lo $f https:\/\/gerrit-review.googlesource.com\/tools\/hooks\/commit-msg ; chmod +x $f)\x22,\x22Clone\x22:\x22git clone \\\x22$\x7bproject\x7d\\\x22\x22\x7d\x7d,\x22http\x22:\x7b\x22url\x22:\x22https:\/\/chromium.googlesource.com\/$\x7bproject\x7d\x22,\x22is_auth_supported\x22:true,\x22commands\x22:\x7b\x7d,\x22clone_commands\x22:\x7b\x22Clone with commit-msg hook\x22:\x22git clone https:\/\/chromium.googlesource.com\/$\x7bproject\x7d \\u0026\\u0026 (cd $\x7bproject-base-name\x7d \\u0026\\u0026 f\\u003d`git rev-parse --git-dir`\/hooks\/commit-msg ; mkdir -p $(dirname $f) ; curl -Lo $f https:\/\/gerrit-review.googlesource.com\/tools\/hooks\/commit-msg ; chmod +x $f)\x22,\x22Clone\x22:\x22git clone \\\x22https:\/\/chromium.googlesource.com\/$\x7bproject\x7d\\\x22\x22\x7d\x7d\x7d,\x22archives\x22:\x5b\x5d\x7d,\x22gerrit\x22:\x7b\x22all_projects\x22:\x22All-Projects\x22,\x22all_users\x22:\x22All-Users\x22,\x22doc_search\x22:false,\x22doc_url\x22:\x22https:\/\/gerrit-review.googlesource.com\/Documentation\/\x22,\x22report_bug_url\x22:\x22https:\/\/issues.gerritcodereview.com\/issues\/new?component\\u003d1371020\x22,\x22instance_id\x22:\x22chromium\x22,\x22default_branch\x22:\x22refs\/heads\/main\x22,\x22project_state_predicate_enabled\x22:false\x7d,\x22note_db_enabled\x22:true,\x22plugin\x22:\x7b\x22has_avatars\x22:true,\x22js_resource_paths\x22:\x5b\x22plugins\/chromium-behavior\/static\/chromium-behavior.js\x22,\x22plugins\/codemirror_editor\/static\/codemirror_editor.js\x22,\x22plugins\/commitqueue\/static\/commitqueue.js\x22,\x22plugins\/gold\/static\/gold.js\x22,\x22plugins\/image_diff\/static\/image_diff.js\x22,\x22plugins\/metrics-clearcut\/static\/metrics-clearcut.js\x22,\x22plugins\/next_review\/static\/next_review.js\x22,\x22plugins\/git_source_editor\/static\/git_source_editor.js\x22,\x22plugins\/feedback\/static\/feedback.js\x22,\x22plugins\/google\/static\/google.js\x22,\x22plugins\/privacy_text\/static\/privacy_text.js\x22,\x22plugins\/suggest_code_reviewers\/static\/suggest_code_reviewers.js\x22,\x22plugins\/buganizer_hovercard\/static\/buganizer_hovercard.js\x22,\x22plugins\/gerrit_sync_edits\/static\/gerrit_sync_edits.js\x22,\x22plugins\/availability\/static\/availability.js\x22,\x22plugins\/reviewers\/static\/rv-reviewers.js\x22,\x22plugins\/insight\/static\/insight.js\x22,\x22plugins\/chromium-binary-size\/static\/chromium-binary-size.js\x22,\x22plugins\/binary-size\/static\/binary-size.js\x22,\x22plugins\/buildbucket\/static\/buildbucket.js\x22,\x22plugins\/chumpdetector\/static\/chumpdetector.js\x22,\x22plugins\/chromium-coverage\/static\/chromium-coverage.js\x22,\x22plugins\/code-owners\/static\/code-owners.js\x22,\x22plugins\/comments2code\/static\/comments2code.js\x22,\x22plugins\/openworkspace\/static\/openworkspace.js\x22,\x22plugins\/zosscoverage\/static\/zoss_coverage.js\x22,\x22plugins\/landingwidget\/static\/landingwidget.js\x22,\x22plugins\/tricium\/static\/tricium.js\x22,\x22plugins\/treetop\/static\/treetop.js\x22\x5d\x7d,\x22suggest\x22:\x7b\x22from\x22:3\x7d,\x22user\x22:\x7b\x22anonymous_coward_name\x22:\x22Name of user not set\x22\x7d,\x22receive\x22:\x7b\x22enable_signed_push\x22:false\x7d,\x22default_theme\x22:\x22\/static\/gerrit-theme.js\x22,\x22submit_requirement_dashboard_columns\x22:\x5b\x22Code-Review\x22,\x22Verified\x22,\x22Commit-Queue\x22\x5d,\x22metadata\x22:\x5b\x5d\x7d, \x22\/config\/server\/top-menus\x22: \x5b\x5d\x7d');window.ENABLED_EXPERIMENTS = JSON.parse('\x5b\x22UiFeature__diff_rendering_lit\x22,\x22UiFeature__suggest_edit\x22,\x22UiFeature__mention_users\x22,\x22UiFeature__enable_next_review_plugin\x22,\x22UiFeature__ml_suggested_edit_v2\x22,\x22UiFeature__rebase_on_behalf_of_uploader\x22,\x22UiFeature__comments_chips_in_file_list\x22,\x22UiFeature__diff_for_user_suggested_edit\x22,\x22UiFeature__push_notifications\x22,\x22UiFeature__save_project_config_for_review\x22,\x22UiFeature__ltp_checks\x22,\x22UiFeature__require_bug_entry_minus_two_android\x22,\x22UiFeature__ml_suggested_edit\x22,\x22UiFeature__gr_textarea_enabled\x22,\x22UiFeature__revision_parents_data\x22,\x22UiFeature__enable_treetop_plugin\x22\x5d');</script>
<link rel="icon" type="image/x-icon" href="/favicon.ico">
<link rel="preload" href="/changes/devtools%2Fdevtools-frontend~6411011/detail?O=1996394" as="fetch" type="application/json" crossorigin="anonymous"/>
<link rel="preload" href="/changes/devtools%2Fdevtools-frontend~6411011/comments?enable-context=true&context-padding=3" as="fetch" type="application/json" crossorigin="anonymous"/>
<link rel="preload" href="/changes/devtools%2Fdevtools-frontend~6411011/robotcomments" as="fetch" type="application/json" crossorigin="anonymous"/>
<link rel="preload" href="/changes/?q=change:6411011" as="fetch" type="application/json" crossorigin="anonymous"/>
<link rel="preload" as="style" href="https://fonts.googleapis.com/css?family=Roboto+Mono:400,500,700|Roboto:400,500,700|Open+Sans:400,500,600,700&display=swap"><link rel="preload" as="style" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0..1,0"/>
<link rel="preload" as="style" href="https://cdn.googlesource.com/polygerrit_ui/1399.0/styles/main.css">
<script src="https://cdn.googlesource.com/polygerrit_ui/1399.0/bower_components/webcomponentsjs/webcomponents-lite.js" nonce="5fI8Q1vyigrjqtMwyOzu1A"></script>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto+Mono:400,500,700|Roboto:400,500,700|Open+Sans:400,500,600,700&display=swap">
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0..1,0"/>
<link rel="stylesheet" href="https://cdn.googlesource.com/polygerrit_ui/1399.0/styles/main.css">
<body unresolved>
<gr-app id="pg-app"></gr-app>
<script src="https://cdn.googlesource.com/polygerrit_ui/1399.0/elements/gr-app.js" crossorigin="anonymous" nonce="5fI8Q1vyigrjqtMwyOzu1A"></script>
